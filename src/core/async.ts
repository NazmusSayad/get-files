// This code is generated by ChatGPT from './sync.ts' file.

import * as fs from 'fs'
import * as path from 'path'
import { defaultConfig } from '../config'
import { Options } from '../types'

export default async function async(
  base: string,
  options = {} as Partial<Options>
): Promise<string[]> {
  const conf = { ...defaultConfig, ...options }
  const excludedDirs = new Set(conf.excludeFolders)
  const basePath = path.resolve(base)

  async function readDir(dir: string): Promise<void> {
    const children = await fs.promises.readdir(dir)

    for (const child of children) {
      if (excludedDirs.has(child)) continue

      const fullPath = path.join(dir, child)
      const relativePath = path.relative(basePath, fullPath)
      const targetPath = conf.relative ? relativePath : fullPath
      const stats = await fs.promises.lstat(fullPath)

      if (stats.isDirectory()) {
        await readDir(fullPath)
      } else {
        if (stats.size > conf.maxSize || stats.size < conf.minSize) continue
        if (conf.filter instanceof RegExp && !conf.filter.test(targetPath))
          continue
        if (
          conf.filter instanceof Function &&
          !(await conf.filter({
            ...path.parse(fullPath),
            relative: relativePath,
            path: fullPath,
          }))
        ) {
          continue
        }

        files.push(targetPath)
      }
    }
  }

  const files: string[] = []
  await readDir(basePath)
  return files
}
